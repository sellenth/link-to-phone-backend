{"version":3,"sources":["SignUp.tsx","App.tsx","index.tsx"],"names":["SignUp","toast","useToast","React","useState","showSignupControls","setShowSignupControls","phoneNumber","setPhoneNumber","password","setPassword","isProcessing","setIsProcessing","flexDir","my","position","visibility","w","size","p","color","backgroundColor","onClick","fontSize","href","textDecoration","mb","children","focusBorderColor","type","placeholder","value","length","substr","formatPhoneNumber","onChange","onKeyDown","e","key","charCodeAt","target","maxlength","title","description","toastMsg","status","duration","isClosable","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","a","ok","Promise","reject","catch","finally","performNetworkCall","isLoading","App","minH","mx","borderY","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5a8171c.chunk.js","sourcesContent":["import { Box, Center, Button, Link, Text, InputGroup, InputLeftAddon, Input, useToast } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\nfunction SignUp() {\r\n    const toast = useToast();\r\n    const [showSignupControls, setShowSignupControls] = React.useState(false)\r\n    const [phoneNumber, setPhoneNumber] = React.useState('');\r\n    const [password, setPassword] = React.useState('');\r\n    const [isProcessing, setIsProcessing] = React.useState(false);\r\n\r\n    const handlePhoneChange = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key.charCodeAt(0) >= 48 && e.key.charCodeAt(0) <= 57) {\r\n            if (phoneNumber.length < 10) {\r\n                setPhoneNumber(phoneNumber + e.key)\r\n            }\r\n        } else if (e.key === \"Backspace\" || e.key === \"Delete\") {\r\n            setPhoneNumber(phoneNumber.substr(0, phoneNumber.length - 1))\r\n        }\r\n    }\r\n\r\n    const formatPhoneNumber = (phoneNumber: string): string => {\r\n        if (phoneNumber.length >= 6) {\r\n            return `(${phoneNumber.substr(0, 3)}) ${phoneNumber.substr(3, 3)}-${phoneNumber.substr(6)}`\r\n        }\r\n        else if (phoneNumber.length >= 3) {\r\n            return `(${phoneNumber.substr(0, 3)}) ${phoneNumber.substr(3)}`\r\n        } else {\r\n            return `${phoneNumber}`\r\n        }\r\n    }\r\n\r\n    const performNetworkCall = () => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ phoneNumber: `+1${phoneNumber}`, password: password })\r\n        };\r\n        fetch(process.env.NODE_ENV === \"development\" ?\r\n            'http://localhost:3001/create-user' :\r\n            'https://www.link-to-phone.com', requestOptions)\r\n            .then(async response => {\r\n                if (!response.ok) {\r\n                    return Promise.reject();\r\n                } else {\r\n                    toast({\r\n                        title: \"Success\",\r\n                        description: \"Your account has been created, expect a text message from us shortly.\",\r\n                        status: \"success\",\r\n                        duration: 5000,\r\n                        isClosable: true\r\n                    })\r\n                }\r\n            })\r\n            .catch(() => {\r\n                toast({\r\n                    title: \"Error\",\r\n                    description: \"Something went wrong, maybe a user already exists with that phone number\",\r\n                    status: \"error\",\r\n                    duration: 5000,\r\n                    isClosable: true\r\n                })\r\n            })\r\n            .finally(() => {setIsProcessing(false)});\r\n\r\n    }\r\n\r\n    const submitCredentials = () => {\r\n        if (phoneNumber.length < 10 || password.length < 5) {\r\n            let toastMsg = ''\r\n            toastMsg += \"Please enter a valid 10 digit US phone number and a password 5+ characters long\"\r\n            toast({\r\n                title: \"Error\",\r\n                description: toastMsg,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true\r\n            })\r\n        } else {\r\n            setIsProcessing(true);\r\n            performNetworkCall();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Center flexDir=\"column\" my=\"2em\">\r\n            <Box position=\"absolute\" visibility={showSignupControls ? 'hidden' : 'visible'}>\r\n                <Button w=\"100%\" size=\"lg\" p=\"10px 10%\" color=\"white\" backgroundColor=\"limegreen\" onClick={() => {setShowSignupControls(true)}}>Create Account</Button>\r\n                <Text fontSize=\"medium\"><em>Or click <Link href=\"https://www.github.com/sellenth/link-to-phone-backend\" textDecoration=\"underline\">here</Link> to learn more.</em></Text>\r\n            </Box>\r\n            <Box visibility={showSignupControls ? 'visible' : 'hidden'} >\r\n                <InputGroup mb=\"5px\">\r\n                    <InputLeftAddon children=\"+1\" />\r\n                    <Input focusBorderColor=\"limegreen\" type=\"tel\"\r\n                        placeholder=\"phone number\" value={formatPhoneNumber(phoneNumber)}\r\n                        onChange={() => {/*Satisfy React*/ }} onKeyDown={handlePhoneChange} />\r\n                </InputGroup>\r\n                <InputGroup mb=\"5px\">\r\n                    <Input\r\n                        onChange={e => setPassword(e.target.value)}\r\n                        value={password}\r\n                        maxlength=\"25\"\r\n                        focusBorderColor=\"limegreen\"\r\n                        type=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                    />\r\n                </InputGroup>\r\n                <Center>\r\n                    <Button size=\"lg\" p=\"10px 10%\" color=\"white\" backgroundColor=\"limegreen\" onClick={submitCredentials} isLoading={isProcessing}>Submit</Button>\r\n                </Center>\r\n            </Box>\r\n        </Center>\r\n    );\r\n}\r\n\r\nexport default SignUp;\r\n","import { Box, Center, Grid, GridItem, Heading, Text } from '@chakra-ui/react';\nimport SignUp from './SignUp';\n\nfunction App() {\n  return (\n    <Center minH=\"100%\" mx={{ \"sm\": \"5%\", \"lg\": \"30%\" }}>\n      <Grid>\n        <GridItem>\n          <Heading fontSize={{ \"base\": \"4xl\", \"lg\": \"6xl\" }}>\n            Link-To-Phone\n          </Heading>\n        </GridItem>\n        <GridItem>\n          <Box borderY=\"7px solid limegreen\" p=\"1%\" fontSize={{ \"sm\": \"xl\", \"md\": \"2xl\" }}>\n            <Text mb=\"1em\">\n              <strong>Brief: </strong> Use your browser to text data to your phone with a couple of clicks.\n            </Text>\n            <Text mb=\"1em\">\n              <strong>Motivation:</strong> Sometimes you find yourself reading an article or watching a video on your computer and want to continue viewing it on your phone.\n              There are many ways to do that, such as copying the link and emailing it to yourself or\n              checking your watch history on YouTube from the mobile app. These methods work but aren't very elegant. First-party solutions such as iMessage on desktop\n              offer a better experience but are coupled to specific platforms.\n            </Text>\n            <SignUp></SignUp>\n          </Box>\n        </GridItem>\n      </Grid>\n    </Center>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}